import { getDbClient, type User as DBUserType, type Session as DBSessionType } from "@tenstack/db";
import type { StandardUserContext } from "./context.js";
type DbClient = ReturnType<typeof getDbClient>;
export type User = DBUserType;
export type Session = DBSessionType;
export type SessionValidationResult = {
    session: Session;
    user: StandardUserContext;
} | {
    session: null;
    user: null;
};
/**
 * Generates a secure, random session token.
 * Uses 20 random bytes encoded in base32 for case-insensitivity and URL safety.
 */
export declare function generateSessionToken(): string;
/**
 * Creates a new session in the database.
 * Hashes the provided token to generate the session ID.
 * Sets expiration to 30 days from now.
 * @param db The database client instance.
 * @param token The raw session token generated by generateSessionToken().
 * @param userId The ID of the user (e.g., Medusa customer ID 'cus_...').
 * @returns The created Session object.
 */
export declare function createSession(db: DbClient, token: string, userId: string): Promise<Session>;
/**
 * Validates a session token provided by the client.
 * 1. Hashes the token to find the corresponding session ID.
 * 2. Checks if the session exists and fetches the associated user.
 * 3. Verifies the session has not expired.
 * 4. Extends the session expiration if it's within the renewal threshold (last 15 days).
 * @param db The database client instance.
 * @param token The raw session token from the client cookie.
 * @returns A SessionValidationResult containing the session and user, or null for both if invalid.
 */
export declare function validateSessionToken(db: DbClient, token: string): Promise<SessionValidationResult>;
/**
 * Invalidates a specific session by deleting it from the database.
 * Requires the database client instance and the session ID (hashed token), not the raw token.
 * @param db The database client instance.
 * @param sessionId The SHA-256 hash of the session token (the ID stored in the database).
 */
export declare function invalidateSession(db: DbClient, tokenFromCookie: string): Promise<void>;
/**
 * Invalidates all sessions associated with a specific user ID.
 * Useful for "log out everywhere" functionality.
 * @param db The database client instance.
 * @param userId The ID of the user whose sessions should be invalidated.
 */
export declare function invalidateAllSessions(db: DbClient, userId: string): Promise<void>;
export {};
